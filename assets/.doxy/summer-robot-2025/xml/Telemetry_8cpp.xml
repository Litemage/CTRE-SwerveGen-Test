<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="Telemetry_8cpp" kind="file" language="C++">
    <compoundname>Telemetry.cpp</compoundname>
    <includes refid="Telemetry_8h" local="yes">Telemetry.h</includes>
    <includes local="no">frc/smartdashboard/SmartDashboard.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/main/cpp/Telemetry.cpp</label>
        <link refid="Telemetry_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Telemetry.h</label>
        <link refid="Telemetry_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>generated/TunerConstants.h</label>
        <link refid="TunerConstants_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>subsystems/CommandSwerveDrivetrain.h</label>
        <link refid="CommandSwerveDrivetrain_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ctre/phoenix6/SignalLogger.hpp</label>
      </node>
      <node id="19">
        <label>ctre/phoenix6/swerve/SwerveDrivetrain.hpp</label>
      </node>
      <node id="13">
        <label>frc/DriverStation.h</label>
      </node>
      <node id="14">
        <label>frc/Notifier.h</label>
      </node>
      <node id="4">
        <label>frc/smartdashboard/Mechanism2d.h</label>
      </node>
      <node id="5">
        <label>frc/smartdashboard/MechanismLigament2d.h</label>
      </node>
      <node id="20">
        <label>frc/smartdashboard/SmartDashboard.h</label>
      </node>
      <node id="15">
        <label>frc2/command/CommandPtr.h</label>
      </node>
      <node id="16">
        <label>frc2/command/SubsystemBase.h</label>
      </node>
      <node id="17">
        <label>frc2/command/sysid/SysIdRoutine.h</label>
      </node>
      <node id="7">
        <label>networktables/DoubleArrayTopic.h</label>
      </node>
      <node id="8">
        <label>networktables/DoubleTopic.h</label>
      </node>
      <node id="6">
        <label>networktables/NetworkTableInstance.h</label>
      </node>
      <node id="9">
        <label>networktables/StringTopic.h</label>
      </node>
      <node id="10">
        <label>networktables/StructArrayTopic.h</label>
      </node>
      <node id="11">
        <label>networktables/StructTopic.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacectre_1_1phoenix6">ctre::phoenix6</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Telemetry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;frc/smartdashboard/SmartDashboard.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">ctre::phoenix6;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="classTelemetry_1a288dded9cb9535abcb597582307022a9" kindref="member">Telemetry::Telemetry</ref>(units::meters_per_second_t<sp/>maxSpeed)<sp/>:<sp/>MaxSpeed{maxSpeed}</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalLogger::Start();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>the<sp/>module<sp/>state<sp/>Mechanism2d<sp/>telemetry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_moduleSpeeds.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frc::SmartDashboard::PutData(</highlight><highlight class="stringliteral">&quot;Module<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i),<sp/>&amp;m_moduleMechanisms[i]);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTelemetry_1a8725e4b0514dc7021d3e46db08d3371f" kindref="member">Telemetry::Telemeterize</ref>(subsystems::CommandSwerveDrivetrain::SwerveDriveState<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;state)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Telemeterize<sp/>the<sp/>swerve<sp/>drive<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>drivePose.Set(state.Pose);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>driveSpeeds.Set(state.Speeds);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>driveModuleStates.Set(state.ModuleStates);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>driveModuleTargets.Set(state.ModuleTargets);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>driveModulePositions.Set(state.ModulePositions);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>driveTimestamp.Set(state.Timestamp.value());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>driveOdometryFrequency.Set(1.0<sp/>/<sp/>state.OdometryPeriod.value());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Also<sp/>write<sp/>to<sp/>log<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>8&gt;<sp/>moduleStatesArray{};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>8&gt;<sp/>moduleTargetsArray{};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduleStatesArray[i*2<sp/>+<sp/>0]<sp/>=<sp/>state.ModuleStates[i].angle.Radians().value();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduleStatesArray[i*2<sp/>+<sp/>1]<sp/>=<sp/>state.ModuleStates[i].speed.value();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduleTargetsArray[i*2<sp/>+<sp/>0]<sp/>=<sp/>state.ModuleTargets[i].angle.Radians().value();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduleTargetsArray[i*2<sp/>+<sp/>1]<sp/>=<sp/>state.ModuleTargets[i].speed.value();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalLogger::WriteDoubleArray(</highlight><highlight class="stringliteral">&quot;DriveState/Pose&quot;</highlight><highlight class="normal">,<sp/>{state.Pose.X().value(),<sp/>state.Pose.Y().value(),<sp/>state.Pose.Rotation().Degrees().value()});</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalLogger::WriteDoubleArray(</highlight><highlight class="stringliteral">&quot;DriveState/ModuleStates&quot;</highlight><highlight class="normal">,<sp/>moduleStatesArray);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalLogger::WriteDoubleArray(</highlight><highlight class="stringliteral">&quot;DriveState/ModuleTargets&quot;</highlight><highlight class="normal">,<sp/>moduleTargetsArray);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalLogger::WriteValue(</highlight><highlight class="stringliteral">&quot;DriveState/OdometryPeriod&quot;</highlight><highlight class="normal">,<sp/>state.OdometryPeriod);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Telemeterize<sp/>the<sp/>pose<sp/>to<sp/>a<sp/>Field2d<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>fieldTypePub.Set(</highlight><highlight class="stringliteral">&quot;Field2d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>fieldPub.Set(std::array{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.Pose.X().value(),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.Pose.Y().value(),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.Pose.Rotation().Degrees().value()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Telemeterize<sp/>each<sp/>module<sp/>state<sp/>to<sp/>a<sp/>Mechanism2d<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_moduleSpeeds.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_moduleDirections[i]-&gt;SetAngle(state.ModuleStates[i].angle.Degrees());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_moduleSpeeds[i]-&gt;SetAngle(state.ModuleStates[i].angle.Degrees());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_moduleSpeeds[i]-&gt;SetLength(state.ModuleStates[i].speed<sp/>/<sp/>(2<sp/>*<sp/>MaxSpeed));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/main/cpp/Telemetry.cpp"/>
  </compounddef>
</doxygen>
