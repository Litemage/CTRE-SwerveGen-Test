<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classTunerSwerveDrivetrain" kind="class" language="C++" prot="public">
    <compoundname>TunerSwerveDrivetrain</compoundname>
    <basecompoundref prot="public" virt="non-virtual">swerve::SwerveDrivetrain&lt; hardware::TalonFX, hardware::TalonFX, hardware::CANcoder &gt;</basecompoundref>
    <derivedcompoundref refid="classsubsystems_1_1CommandSwerveDrivetrain" prot="public" virt="non-virtual">subsystems::CommandSwerveDrivetrain</derivedcompoundref>
    <includes refid="TunerConstants_8h" local="no">TunerConstants.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classTunerSwerveDrivetrain_1a219750ad0532dc2228b8c9568136731a" prot="public" static="no">
        <type>swerve::SwerveModuleConstants&lt; configs::TalonFXConfiguration, configs::TalonFXConfiguration, configs::CANcoderConfiguration &gt;</type>
        <definition>using TunerSwerveDrivetrain::SwerveModuleConstants =  swerve::SwerveModuleConstants&lt;configs::TalonFXConfiguration, configs::TalonFXConfiguration, configs::CANcoderConfiguration&gt;</definition>
        <argsstring></argsstring>
        <name>SwerveModuleConstants</name>
        <qualifiedname>TunerSwerveDrivetrain::SwerveModuleConstants</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/generated/TunerConstants.h" line="200" column="5" bodyfile="src/main/include/generated/TunerConstants.h" bodystart="200" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classTunerSwerveDrivetrain_1acb3919ca13bc9ce7c4ec8e283f60873a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::same_as&lt; SwerveModuleConstants &gt;...</type>
            <declname>ModuleConstants</declname>
            <defname>ModuleConstants</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TunerSwerveDrivetrain::TunerSwerveDrivetrain</definition>
        <argsstring>(swerve::SwerveDrivetrainConstants const &amp;driveTrainConstants, ModuleConstants const &amp;... modules)</argsstring>
        <name>TunerSwerveDrivetrain</name>
        <qualifiedname>TunerSwerveDrivetrain::TunerSwerveDrivetrain</qualifiedname>
        <param>
          <type>swerve::SwerveDrivetrainConstants const &amp;</type>
          <declname>driveTrainConstants</declname>
        </param>
        <param>
          <type>ModuleConstants const &amp;...</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Constructs a CTRE SwerveDrivetrain using the specified constants. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs the underlying hardware devices, so users should not construct the devices themselves. If they need the devices, they can access them through getters in the classes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>drivetrainConstants</parametername>
</parameternamelist>
<parameterdescription>
<para>Drivetrain-wide constants for the swerve drive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Constants for each specific module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/generated/TunerConstants.h" line="213" column="5" bodyfile="src/main/include/generated/TunerConstants.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classTunerSwerveDrivetrain_1aa351625c47db0d2095ac08c12d56639f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::same_as&lt; SwerveModuleConstants &gt;...</type>
            <declname>ModuleConstants</declname>
            <defname>ModuleConstants</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TunerSwerveDrivetrain::TunerSwerveDrivetrain</definition>
        <argsstring>(swerve::SwerveDrivetrainConstants const &amp;driveTrainConstants, units::hertz_t odometryUpdateFrequency, ModuleConstants const &amp;... modules)</argsstring>
        <name>TunerSwerveDrivetrain</name>
        <qualifiedname>TunerSwerveDrivetrain::TunerSwerveDrivetrain</qualifiedname>
        <param>
          <type>swerve::SwerveDrivetrainConstants const &amp;</type>
          <declname>driveTrainConstants</declname>
        </param>
        <param>
          <type>units::hertz_t</type>
          <declname>odometryUpdateFrequency</declname>
        </param>
        <param>
          <type>ModuleConstants const &amp;...</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Constructs a CTRE SwerveDrivetrain using the specified constants. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs the underlying hardware devices, so users should not construct the devices themselves. If they need the devices, they can access them through getters in the classes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>drivetrainConstants</parametername>
</parameternamelist>
<parameterdescription>
<para>Drivetrain-wide constants for the swerve drive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odometryUpdateFrequency</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency to run the odometry loop. If unspecified or set to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Constants for each specific module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/generated/TunerConstants.h" line="231" column="5" bodyfile="src/main/include/generated/TunerConstants.h" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classTunerSwerveDrivetrain_1a708b8a8355195a6b563fe6eece167ec7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::same_as&lt; SwerveModuleConstants &gt;...</type>
            <declname>ModuleConstants</declname>
            <defname>ModuleConstants</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TunerSwerveDrivetrain::TunerSwerveDrivetrain</definition>
        <argsstring>(swerve::SwerveDrivetrainConstants const &amp;driveTrainConstants, units::hertz_t odometryUpdateFrequency, std::array&lt; double, 3 &gt; const &amp;odometryStandardDeviation, std::array&lt; double, 3 &gt; const &amp;visionStandardDeviation, ModuleConstants const &amp;... modules)</argsstring>
        <name>TunerSwerveDrivetrain</name>
        <qualifiedname>TunerSwerveDrivetrain::TunerSwerveDrivetrain</qualifiedname>
        <param>
          <type>swerve::SwerveDrivetrainConstants const &amp;</type>
          <declname>driveTrainConstants</declname>
        </param>
        <param>
          <type>units::hertz_t</type>
          <declname>odometryUpdateFrequency</declname>
        </param>
        <param>
          <type>std::array&lt; double, 3 &gt; const &amp;</type>
          <declname>odometryStandardDeviation</declname>
        </param>
        <param>
          <type>std::array&lt; double, 3 &gt; const &amp;</type>
          <declname>visionStandardDeviation</declname>
        </param>
        <param>
          <type>ModuleConstants const &amp;...</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Constructs a CTRE SwerveDrivetrain using the specified constants. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs the underlying hardware devices, so users should not construct the devices themselves. If they need the devices, they can access them through getters in the classes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>drivetrainConstants</parametername>
</parameternamelist>
<parameterdescription>
<para>Drivetrain-wide constants for the swerve drive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odometryUpdateFrequency</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency to run the odometry loop. If unspecified or set to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odometryStandardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>The standard deviation for odometry calculation in the form [x, y, theta]ᵀ, with units in meters and radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visionStandardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>The standard deviation for vision calculation in the form [x, y, theta]ᵀ, with units in meters and radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Constants for each specific module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/generated/TunerConstants.h" line="259" column="5" bodyfile="src/main/include/generated/TunerConstants.h" bodystart="259" bodyend="270"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Swerve Drive class utilizing CTR Electronics&apos; Phoenix 6 API with the selected device types. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>TunerSwerveDrivetrain</label>
        <link refid="classTunerSwerveDrivetrain"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>subsystems::CommandSwerveDrivetrain</label>
        <link refid="classsubsystems_1_1CommandSwerveDrivetrain"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>swerve::SwerveDrivetrain&lt; hardware::TalonFX, hardware::TalonFX, hardware::CANcoder &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>TunerSwerveDrivetrain</label>
        <link refid="classTunerSwerveDrivetrain"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>swerve::SwerveDrivetrain&lt; hardware::TalonFX, hardware::TalonFX, hardware::CANcoder &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/main/include/generated/TunerConstants.h" line="198" column="1" bodyfile="src/main/include/generated/TunerConstants.h" bodystart="198" bodyend="271"/>
    <listofallmembers>
      <member refid="classTunerSwerveDrivetrain_1a219750ad0532dc2228b8c9568136731a" prot="public" virt="non-virtual"><scope>TunerSwerveDrivetrain</scope><name>SwerveModuleConstants</name></member>
      <member refid="classTunerSwerveDrivetrain_1acb3919ca13bc9ce7c4ec8e283f60873a" prot="public" virt="non-virtual"><scope>TunerSwerveDrivetrain</scope><name>TunerSwerveDrivetrain</name></member>
      <member refid="classTunerSwerveDrivetrain_1aa351625c47db0d2095ac08c12d56639f" prot="public" virt="non-virtual"><scope>TunerSwerveDrivetrain</scope><name>TunerSwerveDrivetrain</name></member>
      <member refid="classTunerSwerveDrivetrain_1a708b8a8355195a6b563fe6eece167ec7" prot="public" virt="non-virtual"><scope>TunerSwerveDrivetrain</scope><name>TunerSwerveDrivetrain</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
