<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classsubsystems_1_1CommandSwerveDrivetrain" kind="class" language="C++" prot="public">
    <compoundname>subsystems::CommandSwerveDrivetrain</compoundname>
    <basecompoundref prot="public" virt="non-virtual">frc2::SubsystemBase</basecompoundref>
    <basecompoundref refid="classTunerSwerveDrivetrain" prot="public" virt="non-virtual">TunerSwerveDrivetrain</basecompoundref>
    <includes refid="CommandSwerveDrivetrain_8h" local="no">CommandSwerveDrivetrain.h</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1a16ceb75efc259b77cf42a35099272d5b" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr units::second_t</type>
        <definition>constexpr units::second_t subsystems::CommandSwerveDrivetrain::kSimLoopPeriod</definition>
        <argsstring></argsstring>
        <name>kSimLoopPeriod</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::kSimLoopPeriod</qualifiedname>
        <initializer>= 5_ms</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="22" column="38" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1aa6650c78a8e88082743c45f54805c9cf" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr frc::Rotation2d</type>
        <definition>constexpr frc::Rotation2d subsystems::CommandSwerveDrivetrain::kBlueAlliancePerspectiveRotation</definition>
        <argsstring></argsstring>
        <name>kBlueAlliancePerspectiveRotation</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::kBlueAlliancePerspectiveRotation</qualifiedname>
        <initializer>{0_deg}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="27" column="38" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1a5104a8d334d95c442a9f9c34a7ffffce" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr frc::Rotation2d</type>
        <definition>constexpr frc::Rotation2d subsystems::CommandSwerveDrivetrain::kRedAlliancePerspectiveRotation</definition>
        <argsstring></argsstring>
        <name>kRedAlliancePerspectiveRotation</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::kRedAlliancePerspectiveRotation</qualifiedname>
        <initializer>{180_deg}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="29" column="38" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="29" bodyend="29"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1a852cdb662c4f5dc9ddc5df4a8a500fca" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; frc::Notifier &gt;</type>
        <definition>std::unique_ptr&lt;frc::Notifier&gt; subsystems::CommandSwerveDrivetrain::m_simNotifier</definition>
        <argsstring></argsstring>
        <name>m_simNotifier</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_simNotifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="23" column="21" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1a21f0aa9f1a2887b0a589aa79f886b469" prot="private" static="no" mutable="no">
        <type>units::second_t</type>
        <definition>units::second_t subsystems::CommandSwerveDrivetrain::m_lastSimTime</definition>
        <argsstring></argsstring>
        <name>m_lastSimTime</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_lastSimTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="24" column="21" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1ab454b508a3deba06a2e313863455fdf2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool subsystems::CommandSwerveDrivetrain::m_hasAppliedOperatorPerspective</definition>
        <argsstring></argsstring>
        <name>m_hasAppliedOperatorPerspective</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_hasAppliedOperatorPerspective</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="31" column="10" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1a39988c888ad641ac0b7d93634f016acb" prot="private" static="no" mutable="no">
        <type>swerve::requests::SysIdSwerveTranslation</type>
        <definition>swerve::requests::SysIdSwerveTranslation subsystems::CommandSwerveDrivetrain::m_translationCharacterization</definition>
        <argsstring></argsstring>
        <name>m_translationCharacterization</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_translationCharacterization</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="34" column="46" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1ab1302a856a4708fe2115f7ac946d8d2d" prot="private" static="no" mutable="no">
        <type>swerve::requests::SysIdSwerveSteerGains</type>
        <definition>swerve::requests::SysIdSwerveSteerGains subsystems::CommandSwerveDrivetrain::m_steerCharacterization</definition>
        <argsstring></argsstring>
        <name>m_steerCharacterization</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_steerCharacterization</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="35" column="45" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1afa6704971af0f9fcb64f60ddcf3c66cb" prot="private" static="no" mutable="no">
        <type>swerve::requests::SysIdSwerveRotation</type>
        <definition>swerve::requests::SysIdSwerveRotation subsystems::CommandSwerveDrivetrain::m_rotationCharacterization</definition>
        <argsstring></argsstring>
        <name>m_rotationCharacterization</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_rotationCharacterization</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="36" column="43" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1af02f3f69e54811f67f89c2b4271fd093" prot="private" static="no" mutable="no">
        <type>frc2::sysid::SysIdRoutine</type>
        <definition>frc2::sysid::SysIdRoutine subsystems::CommandSwerveDrivetrain::m_sysIdRoutineTranslation</definition>
        <argsstring></argsstring>
        <name>m_sysIdRoutineTranslation</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_sysIdRoutineTranslation</qualifiedname>
        <initializer>{
        frc2::sysid::Config{
            std::nullopt, 
            4_V,          
            std::nullopt, 
            
            [](frc::sysid::State state)
            {
                SignalLogger::WriteString(&quot;SysIdTranslation_State&quot;, frc::sysid::SysIdRoutineLog::StateEnumToString(state));
            }
        },
        frc2::sysid::Mechanism{
            [this](units::volt_t output) { SetControl(m_translationCharacterization.WithVolts(output)); },
            {},
            this
        }
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="39" column="31" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="39" bodyend="55"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1a9d3e84d816cf8b1f49ce508f2f149b0a" prot="private" static="no" mutable="no">
        <type>frc2::sysid::SysIdRoutine</type>
        <definition>frc2::sysid::SysIdRoutine subsystems::CommandSwerveDrivetrain::m_sysIdRoutineSteer</definition>
        <argsstring></argsstring>
        <name>m_sysIdRoutineSteer</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_sysIdRoutineSteer</qualifiedname>
        <initializer>{
        frc2::sysid::Config{
            std::nullopt, 
            7_V,          
            std::nullopt, 
            
            [](frc::sysid::State state)
            {
                SignalLogger::WriteString(&quot;SysIdSteer_State&quot;, frc::sysid::SysIdRoutineLog::StateEnumToString(state));
            }
        },
        frc2::sysid::Mechanism{
            [this](units::volt_t output) { SetControl(m_steerCharacterization.WithVolts(output)); },
            {},
            this
        }
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="58" column="31" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="58" bodyend="74"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1add726ff82f43a7abbe87d47baba5fccb" prot="private" static="no" mutable="no">
        <type>frc2::sysid::SysIdRoutine</type>
        <definition>frc2::sysid::SysIdRoutine subsystems::CommandSwerveDrivetrain::m_sysIdRoutineRotation</definition>
        <argsstring></argsstring>
        <name>m_sysIdRoutineRotation</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_sysIdRoutineRotation</qualifiedname>
        <initializer>{
        frc2::sysid::Config{
            
            units::constants::detail::PI_VAL / 6 * (1_V / 1_s),
            
            units::constants::detail::PI_VAL * 1_V,
            std::nullopt, 
            
            [](frc::sysid::State state)
            {
                SignalLogger::WriteString(&quot;SysIdRotation_State&quot;, frc::sysid::SysIdRoutineLog::StateEnumToString(state));
            }
        },
        frc2::sysid::Mechanism{
            [this](units::volt_t output)
            {
                
                SetControl(m_rotationCharacterization.WithRotationalRate(output * (1_rad_per_s / 1_V)));
                
                SignalLogger::WriteValue(&quot;Rotational_Rate&quot;, output * (1_rad_per_s / 1_V));
            },
            {},
            this
        }
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="81" column="31" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="81" bodyend="105"/>
      </memberdef>
      <memberdef kind="variable" id="classsubsystems_1_1CommandSwerveDrivetrain_1a549efe677d86ad2a35e2b66c687b8373" prot="private" static="no" mutable="no">
        <type>frc2::sysid::SysIdRoutine *</type>
        <definition>frc2::sysid::SysIdRoutine* subsystems::CommandSwerveDrivetrain::m_sysIdRoutineToApply</definition>
        <argsstring></argsstring>
        <name>m_sysIdRoutineToApply</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::m_sysIdRoutineToApply</qualifiedname>
        <initializer>= &amp;m_sysIdRoutineTranslation</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="108" column="31" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="108" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1a7c7e962a40c66081e53b451aa3e46c51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::same_as&lt; SwerveModuleConstants &gt;...</type>
            <declname>ModuleConstants</declname>
            <defname>ModuleConstants</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>subsystems::CommandSwerveDrivetrain::CommandSwerveDrivetrain</definition>
        <argsstring>(swerve::SwerveDrivetrainConstants const &amp;driveTrainConstants, ModuleConstants const &amp;... modules)</argsstring>
        <name>CommandSwerveDrivetrain</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::CommandSwerveDrivetrain</qualifiedname>
        <param>
          <type>swerve::SwerveDrivetrainConstants const &amp;</type>
          <declname>driveTrainConstants</declname>
        </param>
        <param>
          <type>ModuleConstants const &amp;...</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Constructs a CTRE SwerveDrivetrain using the specified constants. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs the underlying hardware devices, so users should not construct the devices themselves. If they need the devices, they can access them through getters in the classes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>drivetrainConstants</parametername>
</parameternamelist>
<parameterdescription>
<para>Drivetrain-wide constants for the swerve drive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Constants for each specific module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="122" column="5" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="122" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1a2e64964c211ba0bed80da64501758658" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::same_as&lt; SwerveModuleConstants &gt;...</type>
            <declname>ModuleConstants</declname>
            <defname>ModuleConstants</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>subsystems::CommandSwerveDrivetrain::CommandSwerveDrivetrain</definition>
        <argsstring>(swerve::SwerveDrivetrainConstants const &amp;driveTrainConstants, units::hertz_t odometryUpdateFrequency, ModuleConstants const &amp;... modules)</argsstring>
        <name>CommandSwerveDrivetrain</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::CommandSwerveDrivetrain</qualifiedname>
        <param>
          <type>swerve::SwerveDrivetrainConstants const &amp;</type>
          <declname>driveTrainConstants</declname>
        </param>
        <param>
          <type>units::hertz_t</type>
          <declname>odometryUpdateFrequency</declname>
        </param>
        <param>
          <type>ModuleConstants const &amp;...</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Constructs a CTRE SwerveDrivetrain using the specified constants. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs the underlying hardware devices, so users should not construct the devices themselves. If they need the devices, they can access them through getters in the classes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driveTrainConstants</parametername>
</parameternamelist>
<parameterdescription>
<para>Drivetrain-wide constants for the swerve drive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odometryUpdateFrequency</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency to run the odometry loop. If unspecified or set to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Constants for each specific module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="144" column="5" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="144" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1a3892ff275298d3388f94b5acc0efde76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::same_as&lt; SwerveModuleConstants &gt;...</type>
            <declname>ModuleConstants</declname>
            <defname>ModuleConstants</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>subsystems::CommandSwerveDrivetrain::CommandSwerveDrivetrain</definition>
        <argsstring>(swerve::SwerveDrivetrainConstants const &amp;driveTrainConstants, units::hertz_t odometryUpdateFrequency, std::array&lt; double, 3 &gt; const &amp;odometryStandardDeviation, std::array&lt; double, 3 &gt; const &amp;visionStandardDeviation, ModuleConstants const &amp;... modules)</argsstring>
        <name>CommandSwerveDrivetrain</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::CommandSwerveDrivetrain</qualifiedname>
        <param>
          <type>swerve::SwerveDrivetrainConstants const &amp;</type>
          <declname>driveTrainConstants</declname>
        </param>
        <param>
          <type>units::hertz_t</type>
          <declname>odometryUpdateFrequency</declname>
        </param>
        <param>
          <type>std::array&lt; double, 3 &gt; const &amp;</type>
          <declname>odometryStandardDeviation</declname>
        </param>
        <param>
          <type>std::array&lt; double, 3 &gt; const &amp;</type>
          <declname>visionStandardDeviation</declname>
        </param>
        <param>
          <type>ModuleConstants const &amp;...</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Constructs a CTRE SwerveDrivetrain using the specified constants. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs the underlying hardware devices, so users should not construct the devices themselves. If they need the devices, they can access them through getters in the classes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driveTrainConstants</parametername>
</parameternamelist>
<parameterdescription>
<para>Drivetrain-wide constants for the swerve drive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odometryUpdateFrequency</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency to run the odometry loop. If unspecified or set to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odometryStandardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>The standard deviation for odometry calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visionStandardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>The standard deviation for vision calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Constants for each specific module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="172" column="5" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="172" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1ac3c4ee883fbb80dfd9673014e18cee63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RequestSupplier</type>
          </param>
        </templateparamlist>
        <type>frc2::CommandPtr</type>
        <definition>frc2::CommandPtr subsystems::CommandSwerveDrivetrain::ApplyRequest</definition>
        <argsstring>(RequestSupplier request)</argsstring>
        <name>ApplyRequest</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::ApplyRequest</qualifiedname>
        <param>
          <type>RequestSupplier</type>
          <declname>request</declname>
        </param>
    <requiresclause>std::is_lvalue_reference_v&lt;std::invoke_result_t&lt;RequestSupplier&gt;&gt; &amp;&amp; requires(RequestSupplier req, <ref refid="classTunerSwerveDrivetrain" kindref="compound">TunerSwerveDrivetrain</ref> &amp;drive) { drive.SetControl(req()); }    </requiresclause>
        <briefdescription>
<para>Returns a command that applies the specified control request to this swerve drivetrain. </para>
        </briefdescription>
        <detaileddescription>
<para>This captures the returned swerve request by reference, so it must live for at least as long as the drivetrain. This can be done by storing the request as a member variable of your drivetrain subsystem or robot.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the request to apply </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Command to run </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="202" column="22" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1ad17a01c40e4fc5aacda371c660b656ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RequestSupplier</type>
          </param>
        </templateparamlist>
        <type>frc2::CommandPtr</type>
        <definition>frc2::CommandPtr subsystems::CommandSwerveDrivetrain::ApplyRequest</definition>
        <argsstring>(RequestSupplier request)</argsstring>
        <name>ApplyRequest</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::ApplyRequest</qualifiedname>
        <param>
          <type>RequestSupplier</type>
          <declname>request</declname>
        </param>
    <requiresclause>std::negation_v&lt;std::is_lvalue_reference&lt;std::invoke_result_t&lt;RequestSupplier&gt;&gt;&gt; &amp;&amp; requires(RequestSupplier req, <ref refid="classTunerSwerveDrivetrain" kindref="compound">TunerSwerveDrivetrain</ref> &amp;drive) { drive.SetControl(req()); }    </requiresclause>
        <briefdescription>
<para>Returns a command that applies the specified control request to this swerve drivetrain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the request to apply </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Command to run </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="218" column="22" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="218" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1a0ff6c866ecd5045e61cc40941c5db42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommandSwerveDrivetrain::Periodic</definition>
        <argsstring>() override</argsstring>
        <name>Periodic</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::Periodic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="225" column="10" bodyfile="src/main/cpp/subsystems/CommandSwerveDrivetrain.cpp" bodystart="6" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1af403818c21ec3ebe0a3e65839e8e7e8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>frc2::CommandPtr</type>
        <definition>frc2::CommandPtr subsystems::CommandSwerveDrivetrain::SysIdQuasistatic</definition>
        <argsstring>(frc2::sysid::Direction direction)</argsstring>
        <name>SysIdQuasistatic</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::SysIdQuasistatic</qualifiedname>
        <param>
          <type>frc2::sysid::Direction</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Runs the SysId Quasistatic test in the given direction for the routine specified by m_sysIdRoutineToApply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction of the SysId Quasistatic test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Command to run </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="234" column="22" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1a4421bfdeb6697f18512d8b0250f1ff70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>frc2::CommandPtr</type>
        <definition>frc2::CommandPtr subsystems::CommandSwerveDrivetrain::SysIdDynamic</definition>
        <argsstring>(frc2::sysid::Direction direction)</argsstring>
        <name>SysIdDynamic</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::SysIdDynamic</qualifiedname>
        <param>
          <type>frc2::sysid::Direction</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Runs the SysId Dynamic test in the given direction for the routine specified by m_sysIdRoutineToApply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction of the SysId Dynamic test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Command to run </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="246" column="22" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1aae2282f06e966a8777eb9612681721db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void subsystems::CommandSwerveDrivetrain::AddVisionMeasurement</definition>
        <argsstring>(frc::Pose2d visionRobotPose, units::second_t timestamp) override</argsstring>
        <name>AddVisionMeasurement</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::AddVisionMeasurement</qualifiedname>
        <param>
          <type>frc::Pose2d</type>
          <declname>visionRobotPose</declname>
        </param>
        <param>
          <type>units::second_t</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Adds a vision measurement to the Kalman Filter. This will correct the odometry pose estimate while still accounting for measurement noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visionRobotPose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot as measured by the vision camera. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp of the vision measurement in seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="258" column="10" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1a4fc3f74712ea5142af04ecaddf5546b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void subsystems::CommandSwerveDrivetrain::AddVisionMeasurement</definition>
        <argsstring>(frc::Pose2d visionRobotPose, units::second_t timestamp, std::array&lt; double, 3 &gt; visionMeasurementStdDevs) override</argsstring>
        <name>AddVisionMeasurement</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::AddVisionMeasurement</qualifiedname>
        <param>
          <type>frc::Pose2d</type>
          <declname>visionRobotPose</declname>
        </param>
        <param>
          <type>units::second_t</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>std::array&lt; double, 3 &gt;</type>
          <declname>visionMeasurementStdDevs</declname>
        </param>
        <briefdescription>
<para>Adds a vision measurement to the Kalman Filter. This will correct the odometry pose estimate while still accounting for measurement noise. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the vision measurement standard deviations passed into this method will continue to apply to future measurements until a subsequent call to SetVisionMeasurementStdDevs or this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visionRobotPose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot as measured by the vision camera. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp of the vision measurement in seconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visionMeasurementStdDevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviations of the vision pose measurement. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="275" column="10" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="275" bodyend="281"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classsubsystems_1_1CommandSwerveDrivetrain_1a8279933692e046d8e24b9c6a2d2b9577" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommandSwerveDrivetrain::StartSimThread</definition>
        <argsstring>()</argsstring>
        <name>StartSimThread</name>
        <qualifiedname>subsystems::CommandSwerveDrivetrain::StartSimThread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="284" column="10" bodyfile="src/main/cpp/subsystems/CommandSwerveDrivetrain.cpp" bodystart="28" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class that extends the Phoenix 6 SwerveDrivetrain class and implements Subsystem so it can easily be used in command-based projects. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>TunerSwerveDrivetrain</label>
        <link refid="classTunerSwerveDrivetrain"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>frc2::SubsystemBase</label>
      </node>
      <node id="1">
        <label>subsystems::CommandSwerveDrivetrain</label>
        <link refid="classsubsystems_1_1CommandSwerveDrivetrain"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>swerve::SwerveDrivetrain&lt; hardware::TalonFX, hardware::TalonFX, hardware::CANcoder &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>TunerSwerveDrivetrain</label>
        <link refid="classTunerSwerveDrivetrain"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>frc2::SubsystemBase</label>
      </node>
      <node id="1">
        <label>subsystems::CommandSwerveDrivetrain</label>
        <link refid="classsubsystems_1_1CommandSwerveDrivetrain"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>swerve::SwerveDrivetrain&lt; hardware::TalonFX, hardware::TalonFX, hardware::CANcoder &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/main/include/subsystems/CommandSwerveDrivetrain.h" line="21" column="1" bodyfile="src/main/include/subsystems/CommandSwerveDrivetrain.h" bodystart="21" bodyend="285"/>
    <listofallmembers>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1aae2282f06e966a8777eb9612681721db" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>AddVisionMeasurement</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a4fc3f74712ea5142af04ecaddf5546b4" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>AddVisionMeasurement</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1ac3c4ee883fbb80dfd9673014e18cee63" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>ApplyRequest</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1ad17a01c40e4fc5aacda371c660b656ea" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>ApplyRequest</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a7c7e962a40c66081e53b451aa3e46c51" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>CommandSwerveDrivetrain</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a2e64964c211ba0bed80da64501758658" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>CommandSwerveDrivetrain</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a3892ff275298d3388f94b5acc0efde76" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>CommandSwerveDrivetrain</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1aa6650c78a8e88082743c45f54805c9cf" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>kBlueAlliancePerspectiveRotation</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a5104a8d334d95c442a9f9c34a7ffffce" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>kRedAlliancePerspectiveRotation</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a16ceb75efc259b77cf42a35099272d5b" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>kSimLoopPeriod</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1ab454b508a3deba06a2e313863455fdf2" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_hasAppliedOperatorPerspective</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a21f0aa9f1a2887b0a589aa79f886b469" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_lastSimTime</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1afa6704971af0f9fcb64f60ddcf3c66cb" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_rotationCharacterization</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a852cdb662c4f5dc9ddc5df4a8a500fca" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_simNotifier</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1ab1302a856a4708fe2115f7ac946d8d2d" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_steerCharacterization</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1add726ff82f43a7abbe87d47baba5fccb" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_sysIdRoutineRotation</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a9d3e84d816cf8b1f49ce508f2f149b0a" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_sysIdRoutineSteer</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a549efe677d86ad2a35e2b66c687b8373" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_sysIdRoutineToApply</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1af02f3f69e54811f67f89c2b4271fd093" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_sysIdRoutineTranslation</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a39988c888ad641ac0b7d93634f016acb" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>m_translationCharacterization</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a0ff6c866ecd5045e61cc40941c5db42c" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>Periodic</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a8279933692e046d8e24b9c6a2d2b9577" prot="private" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>StartSimThread</name></member>
      <member refid="classTunerSwerveDrivetrain_1a219750ad0532dc2228b8c9568136731a" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>SwerveModuleConstants</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1a4421bfdeb6697f18512d8b0250f1ff70" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>SysIdDynamic</name></member>
      <member refid="classsubsystems_1_1CommandSwerveDrivetrain_1af403818c21ec3ebe0a3e65839e8e7e8d" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>SysIdQuasistatic</name></member>
      <member refid="classTunerSwerveDrivetrain_1acb3919ca13bc9ce7c4ec8e283f60873a" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>TunerSwerveDrivetrain</name></member>
      <member refid="classTunerSwerveDrivetrain_1aa351625c47db0d2095ac08c12d56639f" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>TunerSwerveDrivetrain</name></member>
      <member refid="classTunerSwerveDrivetrain_1a708b8a8355195a6b563fe6eece167ec7" prot="public" virt="non-virtual"><scope>subsystems::CommandSwerveDrivetrain</scope><name>TunerSwerveDrivetrain</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
